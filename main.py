import build_dataset as dataset
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn import tree
from sklearn.ensemble import _forest as forest
from sklearn.metrics import confusion_matrix, accuracy_score

print("Splitting data...")
x_train, x_test, y_train, y_test = train_test_split(dataset.X, dataset.y, test_size=0.2, random_state=35, shuffle=True)

print("\nTraining Support Vector Machine")
classifier_svm = SVC(kernel='rbf', random_state=0, gamma='scale')
classifier_svm.fit(x_train, y_train)
y_predict = classifier_svm.predict(x_test)
cM = confusion_matrix(y_test, y_predict)
print("Confusion Matrix of SVM <--")
print(cM)
print("Accuracy of SVM <--> ",accuracy_score(y_test, y_predict))

print("\nTraining Decision Tree Classifier")
classifier_dTree = tree.DecisionTreeClassifier()
classifier_dTree.fit(x_train,y_train)
y_predict = classifier_dTree.predict(x_test)
cM = confusion_matrix(y_test, y_predict)
print("Confusion Matrix of Decision Tree <--")
print(cM)
print("Accuracy of Decision Tree <--> ",accuracy_score(y_test, y_predict))

print("\nTraining Random Forest Classifier")
classifier_rndf = forest.RandomForestClassifier(n_estimators=10)
classifier_rndf.fit(x_train,y_train)
y_predict = classifier_rndf.predict(x_test)
cM = confusion_matrix(y_test, y_predict)
print("Confusion Matrix of Random Forest <--")
print(cM)
print("Accuracy of Random Forest <--> ",accuracy_score(y_test, y_predict))