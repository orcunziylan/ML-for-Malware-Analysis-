import os
import numpy as np
from tqdm import tqdm

# import read_featurevectors as lf

features = {
    "feature": 1,
    "permission": 2,
    "activity": 3,
    "service_receiver": 3,
    "provider": 3,
    "service": 3,
    "intent": 4,
    "api_call": 5,
    "real_permission": 6,
    "call": 7,
    "url": 8
}

def encode_features(data):
	featureVectors = np.zeros((8))
	for i in range(len(data)):
		if data[i][0] in features.keys():		
			featureVectors[(features[data[i][0]])-1] += 1
	return featureVectors

X = [] # feature vectors
y = [] # 1 malware / 0 non malware

if os.path.exists('data/X.npy'):
	print ("Loading saved feature vectors/labels set...")
	X = np.load("data/X.npy")
	y = np.load("data/y.npy")
else:
	import tag_data as fm
	print ("Building a new feature vectors/labels set...")

	for i in tqdm(fm.malware):
		# info = np.array([])
		info = np.genfromtxt("drebin/feature_vectors/"+i, delimiter="::", dtype=str, invalid_raise = False)
		if len(info) > 0: # if file is not empty
			encoded_features = encode_features(info)
			X.append(encoded_features)
			y.append(1)

	print ("Malware features are successfully added to the dataset!")

	for index, i in enumerate(tqdm(fm.non_malware)):
		if index >= len(fm.malware):
			break

		info = np.genfromtxt("drebin/feature_vectors/"+i, delimiter="::", dtype=str, invalid_raise = False)
		if len(info) > 0: # if file is not empty
			encoded_features = encode_features(info)
			X.append(encoded_features)
			y.append(0)

	print ("Non malware features are successfully added to the dataset!")

	print("Saving the dataset...")

	if not os.path.exists('data'):
		os.makedirs("data") 

	np.save("data/X.npy", np.array(X))
	np.save("data/y.npy", np.array(y))